<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 风海啸博客</title>
    <link>http://xiaohaoppy.daoapp.io/post/</link>
    <description>Recent content in Posts on 风海啸博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 16 Apr 2016 19:26:35 +0800</lastBuildDate>
    <atom:link href="http://xiaohaoppy.daoapp.io/post/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker中编译ngrok</title>
      <link>http://xiaohaoppy.daoapp.io/post/docker%E4%B8%AD%E7%BC%96%E8%AF%91ngrok/</link>
      <pubDate>Sat, 16 Apr 2016 19:26:35 +0800</pubDate>
      
      <guid>http://xiaohaoppy.daoapp.io/post/docker%E4%B8%AD%E7%BC%96%E8%AF%91ngrok/</guid>
      <description>

&lt;h1 id=&#34;使用官方golang镜像:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;使用官方golang镜像&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;docker run -i -t golang /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行完直接进入容器&lt;/p&gt;

&lt;h1 id=&#34;下载ngrok:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;下载ngrok&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;cd /
git clone https://github.com/tutumcloud/ngrok.git /ngrok
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;编译ngrok:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;编译ngrok&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;export GOPATH=/ngrok/
export NGROK_DOMAIN=&amp;quot;ngrok.me&amp;quot; #域名

openssl genrsa -out rootCA.key 2048 #生成密钥
openssl req -x509 -new -nodes -key rootCA.key -subj &amp;quot;/CN=$NGROK_DOMAIN&amp;quot; -days 5000 -out rootCA.pem
openssl genrsa -out server.key 2048
openssl req -new -key server.key -subj &amp;quot;/CN=$NGROK_DOMAIN&amp;quot; -out server.csr
openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000
cp rootCA.pem assets/client/tls/ngrokroot.crt
cp server.crt assets/server/tls/snakeoil.crt
cp server.key assets/server/tls/snakeoil.key
GOOS=windows GOARCH=amd64 make release-client release-server #编译 生成win版
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;退出容器导出:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;退出容器导出&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;docker cp &amp;lt;容器ID&amp;gt;:/ngrok/bin/windows_amd64/ /c/User/ngrok/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;修改host文件:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;修改host文件&lt;/h1&gt;

&lt;p&gt;添加 127.0.0.1    ngrok.me&lt;/p&gt;

&lt;h1 id=&#34;启动ngrokd:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;启动ngrokd&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ngrokd -domain=&amp;quot;ngrok.me&amp;quot; -httpAddr=&amp;quot;:8080&amp;quot; -httpsAddr=&amp;quot;:8081&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;测试客户端:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;测试客户端&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ngrok -config ngrok.cfg start baseapp loginapp
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;测试成功:c4b48cb8c94f77dcf8d07046d6ba9f41&#34;&gt;测试成功&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ngrok                                                                                                                                                   (Ctrl+C to quit)

Tunnel Status                 online
Version                       1.7/1.7
Forwarding                    tcp://ngrok.me:30013 -&amp;gt; 127.0.0.1:30013
Forwarding                    tcp://ngrok.me:30015 -&amp;gt; 127.0.0.1:30015
Web Interface                 127.0.0.1:4040
# Conn                        0
Avg Conn Time                 0.00ms
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用反向链接搭建公网可访问的kbe服务</title>
      <link>http://xiaohaoppy.daoapp.io/post/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91%E9%93%BE%E6%8E%A5%E6%90%AD%E5%BB%BA%E5%85%AC%E7%BD%91%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84kbe%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 14 Apr 2016 14:12:03 +0800</pubDate>
      
      <guid>http://xiaohaoppy.daoapp.io/post/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91%E9%93%BE%E6%8E%A5%E6%90%AD%E5%BB%BA%E5%85%AC%E7%BD%91%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84kbe%E6%9C%8D%E5%8A%A1/</guid>
      <description>

&lt;h1 id=&#34;ngrok-内网穿透利器:bbb754c3114ecee08038d32c7415911d&#34;&gt;Ngrok 内网穿透利器&lt;/h1&gt;

&lt;p&gt;ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放&lt;/p&gt;

&lt;p&gt;使用国内免费Ngrok &lt;a href=&#34;http://qydevv.com&#34;&gt;http://qydevv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正式使用自行搭建ngrok服务器&lt;/p&gt;

&lt;p&gt;ngrok开源地址 &lt;a href=&#34;https://github.com/tutumcloud/ngrok&#34;&gt;https://github.com/tutumcloud/ngrok&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;开始部署:bbb754c3114ecee08038d32c7415911d&#34;&gt;开始部署&lt;/h1&gt;

&lt;p&gt;修改kbengine配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;loginapp&amp;gt;
        &amp;lt;externalAddress&amp;gt; tunnel.qydev.com &amp;lt;/externalAddress&amp;gt;
        &amp;lt;externalPorts_min&amp;gt; 30013 &amp;lt;/externalPorts_min&amp;gt;		
                        			
		&amp;lt;externalPorts_max&amp;gt; 0 &amp;lt;/externalPorts_max&amp;gt;
	&amp;lt;/loginapp&amp;gt;	
    
    
    &amp;lt;baseapp&amp;gt;
		&amp;lt;backupPeriod&amp;gt; 500 &amp;lt;/backupPeriod&amp;gt;
        &amp;lt;externalAddress&amp;gt; tunnel.qydev.com &amp;lt;/externalAddress&amp;gt;
        &amp;lt;externalPorts_min&amp;gt; 30015 &amp;lt;/externalPorts_min&amp;gt;					 
		&amp;lt;externalPorts_max&amp;gt; 0 &amp;lt;/externalPorts_max&amp;gt;
	&amp;lt;/baseapp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ngrok配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server_addr: &amp;quot;tunnel.qydev.com:4443&amp;quot;
trust_host_root_certs: false
tunnels: 
  loginapp:
   remote_port: 30013 
   proto:
    tcp: 30013 
  baseapp: 
    remote_port: 30015
    proto:
      tcp: 30015

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;启动kbe:bbb754c3114ecee08038d32c7415911d&#34;&gt;启动kbe&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sh start_server.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;启动ngrok:bbb754c3114ecee08038d32c7415911d&#34;&gt;启动ngrok&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ngrok -config ngrok.cfg start baseapp loginapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样外网就可以访问内网kbe服务了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kbe运行镜像</title>
      <link>http://xiaohaoppy.daoapp.io/post/kbe%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 14 Apr 2016 11:37:04 +0800</pubDate>
      
      <guid>http://xiaohaoppy.daoapp.io/post/kbe%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F/</guid>
      <description>

&lt;h1 id=&#34;镜像地址:091568a9ec46ad4d8d09b6399a30aff5&#34;&gt;镜像地址&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/xiaohaoppy/kbe_server&#34;&gt;https://github.com/xiaohaoppy/kbe_server&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;用途:091568a9ec46ad4d8d09b6399a30aff5&#34;&gt;用途&lt;/h1&gt;

&lt;p&gt;一台服务器部署多组kbe服务&lt;/p&gt;

&lt;p&gt;可以使用该镜像分布式部署kbe&lt;/p&gt;

&lt;h1 id=&#34;用法:091568a9ec46ad4d8d09b6399a30aff5&#34;&gt;用法&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt; git clone https://github.com/xiaohaoppy/kbe_server.git
 cd kbe_server
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用编译镜像编译kbehttps://github.com/xiaohaoppy/KBE_BUILD_EVN&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run xiaohaoppy/KBE_BUILD_EVN
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待编译完成 拷贝出编译的文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker cp &amp;lt;编译镜像容器的ID&amp;gt;：/kbengine/kbe/bin /kbengine/kbe/bin
 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; assets\scripts/下放入自己的额脚本逻辑
 
 assets\res\server/kbengine.xml 修改配置文件 该容器里没有数据库需要自己配置数据库，并且配置对外ip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build镜像:091568a9ec46ad4d8d09b6399a30aff5&#34;&gt;build镜像&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt; docker build xiaohaoppy/kbe-server .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;启动镜像:091568a9ec46ad4d8d09b6399a30aff5&#34;&gt;启动镜像&lt;/h2&gt;

&lt;p&gt;-u 为设置容器的UID -p 映射端口  -i -t 启动个伪终端&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; docker run -t -i -p 20013:20013 -P 20015:20015 -P 20016:20016 -p 20017:20017 -u 1000 xiaohaoppy/kbe-server /bin/bash
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在容器里执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; cd /kbengine/assets
 
 sh start_server.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动kbe完成&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kbe编译镜像</title>
      <link>http://xiaohaoppy.daoapp.io/post/kbe%E7%BC%96%E8%AF%91%E9%95%9C%E5%83%8F/</link>
      <pubDate>Thu, 14 Apr 2016 11:36:45 +0800</pubDate>
      
      <guid>http://xiaohaoppy.daoapp.io/post/kbe%E7%BC%96%E8%AF%91%E9%95%9C%E5%83%8F/</guid>
      <description>

&lt;h1 id=&#34;镜像地址:d19eaa930cac8fed3ce150af40ccd836&#34;&gt;镜像地址&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/xiaohaoppy/KBE_BUILD_EVN&#34;&gt;https://github.com/xiaohaoppy/KBE_BUILD_EVN&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;如何使用:d19eaa930cac8fed3ce150af40ccd836&#34;&gt;如何使用&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;gir clone https://github.com/xiaohaoppy/KBE_BUILD_EVN.git

cd KBE_BUILD_EVN

docker build -t xiaohaoppy/kbe-build-env .

docker run -v /home/kbengine/kbe/bin:/kbengine/kbe/bin xiaohaoppy/kbe-build-env
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>搭建博客</title>
      <link>http://xiaohaoppy.daoapp.io/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 14 Apr 2016 11:07:45 +0800</pubDate>
      
      <guid>http://xiaohaoppy.daoapp.io/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>

&lt;p&gt;博客是hugo生成。&lt;br /&gt;
Hugo是一个用Go语言编写的静态网站生成器，它使用起来非常简单，相对于Jekyll复杂的安装设置来说，Hugo仅需要一个二进制文件hugo(hugo.exe)即可轻松用于本地调试和生成静态页面。&lt;/p&gt;

&lt;p&gt;Hugo生成静态页面的效率很高，我的260多篇博客文章生成几乎是瞬间完成的，而之前用Jekyll需要等待10秒左右。&lt;/p&gt;

&lt;h2 id=&#34;hugo官方网站:355ce35de1283acdf5dc7c877fad7c29&#34;&gt;hugo官方网站&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;本博客项目地址:355ce35de1283acdf5dc7c877fad7c29&#34;&gt;本博客项目地址&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/xiaohaoppy/xiaohaoppy-hugo-blog&#34;&gt;https://github.com/xiaohaoppy/xiaohaoppy-hugo-blog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;博客使用模板地址:355ce35de1283acdf5dc7c877fad7c29&#34;&gt;博客使用模板地址&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/coderzh/hugo-pacman-theme&#34;&gt;https://github.com/coderzh/hugo-pacman-theme&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;生成静态网站地址:355ce35de1283acdf5dc7c877fad7c29&#34;&gt;生成静态网站地址&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/xiaohaoppy/myblog&#34;&gt;https://github.com/xiaohaoppy/myblog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;部署镜像地址:355ce35de1283acdf5dc7c877fad7c29&#34;&gt;部署镜像地址&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/xiaohaoppy/daocloud-blog&#34;&gt;https://github.com/xiaohaoppy/daocloud-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;镜像使用caddy部署，是个静态网站服务器。&lt;/p&gt;

&lt;p&gt;服务启动自动git clone你的静态网站并且每隔一段时间自动git pull&lt;/p&gt;

&lt;p&gt;配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.0.0.0:2015 {
    root /public
    git https://github.com/xiaohaoppy/myblog.git / {
        interval 60
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;部署在:355ce35de1283acdf5dc7c877fad7c29&#34;&gt;部署在&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.daocloud.io/&#34;&gt;https://www.daocloud.io/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>http://xiaohaoppy.daoapp.io/post/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 14 Apr 2016 11:05:39 +0800</pubDate>
      
      <guid>http://xiaohaoppy.daoapp.io/post/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;对你大声的呼喊“哈喽，世界”&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>